using MunitionAutoPatcher.Models;
using MunitionAutoPatcher.Services.Interfaces;
using System.IO;
using System.Text;

namespace MunitionAutoPatcher.Services.Implementations;

/// <summary>
/// Implementation of the RobCo ini generator with actual file writing
/// </summary>
public class RobCoIniGenerator : IRobCoIniGenerator
{
    public async Task<bool> GenerateIniAsync(string outputPath, List<WeaponMapping> mappings, IProgress<string>? progress = null)
    {
        progress?.Report("RobCo INIファイルを生成しています...");
        
        try
        {
            var iniContent = PreviewIni(mappings);
            
            // Ensure the directory exists
            var directory = Path.GetDirectoryName(outputPath);
            if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            
            // Write to file
            await File.WriteAllTextAsync(outputPath, iniContent);
            
            progress?.Report($"INIファイルが生成されました: {outputPath}");
            return true;
        }
        catch (Exception ex)
        {
            progress?.Report($"エラー: INIファイルの生成に失敗しました: {ex.Message}");
            return false;
        }
    }

    public string PreviewIni(List<WeaponMapping> mappings)
    {
        var sb = new StringBuilder();
        sb.AppendLine("; RobCo Patcher Configuration");
        sb.AppendLine("; Generated by Munition AutoPatcher");
        sb.AppendLine($"; Generated at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        sb.AppendLine();
        
        if (mappings.Count == 0)
        {
            sb.AppendLine("; No weapon mappings configured");
            return sb.ToString();
        }
        
        foreach (var mapping in mappings)
        {
            sb.AppendLine($"[Weapon:{mapping.WeaponFormKey}]");
            sb.AppendLine($"Ammo={mapping.AmmoFormKey}");
            sb.AppendLine($"Strategy={mapping.Strategy}");
            if (mapping.IsManualMapping)
            {
                sb.AppendLine("ManualMapping=true");
            }
            sb.AppendLine();
        }

        return sb.ToString();
    }
}
